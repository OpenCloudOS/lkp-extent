// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: cli.proto

package cli

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CliClient is the client API for Cli service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CliClient interface {
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
	NodeInspect(ctx context.Context, in *NodeInspectRequest, opts ...grpc.CallOption) (*NodeInspectResponse, error)
	NodeList(ctx context.Context, in *NodeListRequest, opts ...grpc.CallOption) (*NodeListResponse, error)
	CaseInspect(ctx context.Context, in *CaseInspectRequest, opts ...grpc.CallOption) (*CaseInspectResponse, error)
	CaseList(ctx context.Context, in *CaseListRequest, opts ...grpc.CallOption) (*CaseListResponse, error)
	CaseAdd(ctx context.Context, in *CaseAddRequest, opts ...grpc.CallOption) (*CaseAddResponse, error)
	CaseUpdate(ctx context.Context, in *CaseUpdateRequest, opts ...grpc.CallOption) (*CaseUpdateResponse, error)
	CasePush(ctx context.Context, in *CasePushRequest, opts ...grpc.CallOption) (*CasePushResponse, error)
	CasePushToAll(ctx context.Context, in *CasePushToAllRequest, opts ...grpc.CallOption) (*CasePushToAllResponse, error)
	JobInspect(ctx context.Context, in *JobInspectRequest, opts ...grpc.CallOption) (*JobInspectResponse, error)
	JobList(ctx context.Context, in *JobListRequest, opts ...grpc.CallOption) (*JobListResponse, error)
	JobRun(ctx context.Context, in *JobRunRequest, opts ...grpc.CallOption) (*JobRunResponse, error)
	JobRunToAll(ctx context.Context, in *JobRunToAllRequest, opts ...grpc.CallOption) (*JobRunToAllResponse, error)
	TaskInspect(ctx context.Context, in *TaskInspectRequest, opts ...grpc.CallOption) (*TaskInspectResponse, error)
	TaskList(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*TaskListResponse, error)
	TaskResult(ctx context.Context, in *TaskResultRequest, opts ...grpc.CallOption) (*TaskResultResponse, error)
}

type cliClient struct {
	cc grpc.ClientConnInterface
}

func NewCliClient(cc grpc.ClientConnInterface) CliClient {
	return &cliClient{cc}
}

func (c *cliClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, "/cli.Cli/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliClient) NodeInspect(ctx context.Context, in *NodeInspectRequest, opts ...grpc.CallOption) (*NodeInspectResponse, error) {
	out := new(NodeInspectResponse)
	err := c.cc.Invoke(ctx, "/cli.Cli/NodeInspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliClient) NodeList(ctx context.Context, in *NodeListRequest, opts ...grpc.CallOption) (*NodeListResponse, error) {
	out := new(NodeListResponse)
	err := c.cc.Invoke(ctx, "/cli.Cli/NodeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliClient) CaseInspect(ctx context.Context, in *CaseInspectRequest, opts ...grpc.CallOption) (*CaseInspectResponse, error) {
	out := new(CaseInspectResponse)
	err := c.cc.Invoke(ctx, "/cli.Cli/CaseInspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliClient) CaseList(ctx context.Context, in *CaseListRequest, opts ...grpc.CallOption) (*CaseListResponse, error) {
	out := new(CaseListResponse)
	err := c.cc.Invoke(ctx, "/cli.Cli/CaseList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliClient) CaseAdd(ctx context.Context, in *CaseAddRequest, opts ...grpc.CallOption) (*CaseAddResponse, error) {
	out := new(CaseAddResponse)
	err := c.cc.Invoke(ctx, "/cli.Cli/CaseAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliClient) CaseUpdate(ctx context.Context, in *CaseUpdateRequest, opts ...grpc.CallOption) (*CaseUpdateResponse, error) {
	out := new(CaseUpdateResponse)
	err := c.cc.Invoke(ctx, "/cli.Cli/CaseUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliClient) CasePush(ctx context.Context, in *CasePushRequest, opts ...grpc.CallOption) (*CasePushResponse, error) {
	out := new(CasePushResponse)
	err := c.cc.Invoke(ctx, "/cli.Cli/CasePush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliClient) CasePushToAll(ctx context.Context, in *CasePushToAllRequest, opts ...grpc.CallOption) (*CasePushToAllResponse, error) {
	out := new(CasePushToAllResponse)
	err := c.cc.Invoke(ctx, "/cli.Cli/CasePushToAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliClient) JobInspect(ctx context.Context, in *JobInspectRequest, opts ...grpc.CallOption) (*JobInspectResponse, error) {
	out := new(JobInspectResponse)
	err := c.cc.Invoke(ctx, "/cli.Cli/JobInspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliClient) JobList(ctx context.Context, in *JobListRequest, opts ...grpc.CallOption) (*JobListResponse, error) {
	out := new(JobListResponse)
	err := c.cc.Invoke(ctx, "/cli.Cli/JobList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliClient) JobRun(ctx context.Context, in *JobRunRequest, opts ...grpc.CallOption) (*JobRunResponse, error) {
	out := new(JobRunResponse)
	err := c.cc.Invoke(ctx, "/cli.Cli/JobRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliClient) JobRunToAll(ctx context.Context, in *JobRunToAllRequest, opts ...grpc.CallOption) (*JobRunToAllResponse, error) {
	out := new(JobRunToAllResponse)
	err := c.cc.Invoke(ctx, "/cli.Cli/JobRunToAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliClient) TaskInspect(ctx context.Context, in *TaskInspectRequest, opts ...grpc.CallOption) (*TaskInspectResponse, error) {
	out := new(TaskInspectResponse)
	err := c.cc.Invoke(ctx, "/cli.Cli/TaskInspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliClient) TaskList(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*TaskListResponse, error) {
	out := new(TaskListResponse)
	err := c.cc.Invoke(ctx, "/cli.Cli/TaskList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliClient) TaskResult(ctx context.Context, in *TaskResultRequest, opts ...grpc.CallOption) (*TaskResultResponse, error) {
	out := new(TaskResultResponse)
	err := c.cc.Invoke(ctx, "/cli.Cli/TaskResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CliServer is the server API for Cli service.
// All implementations should embed UnimplementedCliServer
// for forward compatibility
type CliServer interface {
	Init(context.Context, *InitRequest) (*InitResponse, error)
	NodeInspect(context.Context, *NodeInspectRequest) (*NodeInspectResponse, error)
	NodeList(context.Context, *NodeListRequest) (*NodeListResponse, error)
	CaseInspect(context.Context, *CaseInspectRequest) (*CaseInspectResponse, error)
	CaseList(context.Context, *CaseListRequest) (*CaseListResponse, error)
	CaseAdd(context.Context, *CaseAddRequest) (*CaseAddResponse, error)
	CaseUpdate(context.Context, *CaseUpdateRequest) (*CaseUpdateResponse, error)
	CasePush(context.Context, *CasePushRequest) (*CasePushResponse, error)
	CasePushToAll(context.Context, *CasePushToAllRequest) (*CasePushToAllResponse, error)
	JobInspect(context.Context, *JobInspectRequest) (*JobInspectResponse, error)
	JobList(context.Context, *JobListRequest) (*JobListResponse, error)
	JobRun(context.Context, *JobRunRequest) (*JobRunResponse, error)
	JobRunToAll(context.Context, *JobRunToAllRequest) (*JobRunToAllResponse, error)
	TaskInspect(context.Context, *TaskInspectRequest) (*TaskInspectResponse, error)
	TaskList(context.Context, *TaskListRequest) (*TaskListResponse, error)
	TaskResult(context.Context, *TaskResultRequest) (*TaskResultResponse, error)
}

// UnimplementedCliServer should be embedded to have forward compatible implementations.
type UnimplementedCliServer struct {
}

func (UnimplementedCliServer) Init(context.Context, *InitRequest) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedCliServer) NodeInspect(context.Context, *NodeInspectRequest) (*NodeInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeInspect not implemented")
}
func (UnimplementedCliServer) NodeList(context.Context, *NodeListRequest) (*NodeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeList not implemented")
}
func (UnimplementedCliServer) CaseInspect(context.Context, *CaseInspectRequest) (*CaseInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaseInspect not implemented")
}
func (UnimplementedCliServer) CaseList(context.Context, *CaseListRequest) (*CaseListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaseList not implemented")
}
func (UnimplementedCliServer) CaseAdd(context.Context, *CaseAddRequest) (*CaseAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaseAdd not implemented")
}
func (UnimplementedCliServer) CaseUpdate(context.Context, *CaseUpdateRequest) (*CaseUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaseUpdate not implemented")
}
func (UnimplementedCliServer) CasePush(context.Context, *CasePushRequest) (*CasePushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CasePush not implemented")
}
func (UnimplementedCliServer) CasePushToAll(context.Context, *CasePushToAllRequest) (*CasePushToAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CasePushToAll not implemented")
}
func (UnimplementedCliServer) JobInspect(context.Context, *JobInspectRequest) (*JobInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobInspect not implemented")
}
func (UnimplementedCliServer) JobList(context.Context, *JobListRequest) (*JobListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobList not implemented")
}
func (UnimplementedCliServer) JobRun(context.Context, *JobRunRequest) (*JobRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobRun not implemented")
}
func (UnimplementedCliServer) JobRunToAll(context.Context, *JobRunToAllRequest) (*JobRunToAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobRunToAll not implemented")
}
func (UnimplementedCliServer) TaskInspect(context.Context, *TaskInspectRequest) (*TaskInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskInspect not implemented")
}
func (UnimplementedCliServer) TaskList(context.Context, *TaskListRequest) (*TaskListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskList not implemented")
}
func (UnimplementedCliServer) TaskResult(context.Context, *TaskResultRequest) (*TaskResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskResult not implemented")
}

// UnsafeCliServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CliServer will
// result in compilation errors.
type UnsafeCliServer interface {
	mustEmbedUnimplementedCliServer()
}

func RegisterCliServer(s grpc.ServiceRegistrar, srv CliServer) {
	s.RegisterService(&Cli_ServiceDesc, srv)
}

func _Cli_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cli.Cli/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cli_NodeInspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServer).NodeInspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cli.Cli/NodeInspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServer).NodeInspect(ctx, req.(*NodeInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cli_NodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServer).NodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cli.Cli/NodeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServer).NodeList(ctx, req.(*NodeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cli_CaseInspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaseInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServer).CaseInspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cli.Cli/CaseInspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServer).CaseInspect(ctx, req.(*CaseInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cli_CaseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaseListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServer).CaseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cli.Cli/CaseList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServer).CaseList(ctx, req.(*CaseListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cli_CaseAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaseAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServer).CaseAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cli.Cli/CaseAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServer).CaseAdd(ctx, req.(*CaseAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cli_CaseUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaseUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServer).CaseUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cli.Cli/CaseUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServer).CaseUpdate(ctx, req.(*CaseUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cli_CasePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CasePushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServer).CasePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cli.Cli/CasePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServer).CasePush(ctx, req.(*CasePushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cli_CasePushToAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CasePushToAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServer).CasePushToAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cli.Cli/CasePushToAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServer).CasePushToAll(ctx, req.(*CasePushToAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cli_JobInspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServer).JobInspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cli.Cli/JobInspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServer).JobInspect(ctx, req.(*JobInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cli_JobList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServer).JobList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cli.Cli/JobList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServer).JobList(ctx, req.(*JobListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cli_JobRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServer).JobRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cli.Cli/JobRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServer).JobRun(ctx, req.(*JobRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cli_JobRunToAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRunToAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServer).JobRunToAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cli.Cli/JobRunToAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServer).JobRunToAll(ctx, req.(*JobRunToAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cli_TaskInspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServer).TaskInspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cli.Cli/TaskInspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServer).TaskInspect(ctx, req.(*TaskInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cli_TaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServer).TaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cli.Cli/TaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServer).TaskList(ctx, req.(*TaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cli_TaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServer).TaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cli.Cli/TaskResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServer).TaskResult(ctx, req.(*TaskResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cli_ServiceDesc is the grpc.ServiceDesc for Cli service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cli_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cli.Cli",
	HandlerType: (*CliServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _Cli_Init_Handler,
		},
		{
			MethodName: "NodeInspect",
			Handler:    _Cli_NodeInspect_Handler,
		},
		{
			MethodName: "NodeList",
			Handler:    _Cli_NodeList_Handler,
		},
		{
			MethodName: "CaseInspect",
			Handler:    _Cli_CaseInspect_Handler,
		},
		{
			MethodName: "CaseList",
			Handler:    _Cli_CaseList_Handler,
		},
		{
			MethodName: "CaseAdd",
			Handler:    _Cli_CaseAdd_Handler,
		},
		{
			MethodName: "CaseUpdate",
			Handler:    _Cli_CaseUpdate_Handler,
		},
		{
			MethodName: "CasePush",
			Handler:    _Cli_CasePush_Handler,
		},
		{
			MethodName: "CasePushToAll",
			Handler:    _Cli_CasePushToAll_Handler,
		},
		{
			MethodName: "JobInspect",
			Handler:    _Cli_JobInspect_Handler,
		},
		{
			MethodName: "JobList",
			Handler:    _Cli_JobList_Handler,
		},
		{
			MethodName: "JobRun",
			Handler:    _Cli_JobRun_Handler,
		},
		{
			MethodName: "JobRunToAll",
			Handler:    _Cli_JobRunToAll_Handler,
		},
		{
			MethodName: "TaskInspect",
			Handler:    _Cli_TaskInspect_Handler,
		},
		{
			MethodName: "TaskList",
			Handler:    _Cli_TaskList_Handler,
		},
		{
			MethodName: "TaskResult",
			Handler:    _Cli_TaskResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cli.proto",
}

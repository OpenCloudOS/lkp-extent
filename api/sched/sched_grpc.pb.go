// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: sched.proto

package sched

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SchedClient is the client API for Sched service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedClient interface {
	CasePush(ctx context.Context, in *CasePushRequest, opts ...grpc.CallOption) (*CasePushResponse, error)
	JobRun(ctx context.Context, in *JobRunRequest, opts ...grpc.CallOption) (*JobRunResponse, error)
}

type schedClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedClient(cc grpc.ClientConnInterface) SchedClient {
	return &schedClient{cc}
}

func (c *schedClient) CasePush(ctx context.Context, in *CasePushRequest, opts ...grpc.CallOption) (*CasePushResponse, error) {
	out := new(CasePushResponse)
	err := c.cc.Invoke(ctx, "/sched.Sched/CasePush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedClient) JobRun(ctx context.Context, in *JobRunRequest, opts ...grpc.CallOption) (*JobRunResponse, error) {
	out := new(JobRunResponse)
	err := c.cc.Invoke(ctx, "/sched.Sched/JobRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedServer is the server API for Sched service.
// All implementations should embed UnimplementedSchedServer
// for forward compatibility
type SchedServer interface {
	CasePush(context.Context, *CasePushRequest) (*CasePushResponse, error)
	JobRun(context.Context, *JobRunRequest) (*JobRunResponse, error)
}

// UnimplementedSchedServer should be embedded to have forward compatible implementations.
type UnimplementedSchedServer struct {
}

func (UnimplementedSchedServer) CasePush(context.Context, *CasePushRequest) (*CasePushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CasePush not implemented")
}
func (UnimplementedSchedServer) JobRun(context.Context, *JobRunRequest) (*JobRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobRun not implemented")
}

// UnsafeSchedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedServer will
// result in compilation errors.
type UnsafeSchedServer interface {
	mustEmbedUnimplementedSchedServer()
}

func RegisterSchedServer(s grpc.ServiceRegistrar, srv SchedServer) {
	s.RegisterService(&Sched_ServiceDesc, srv)
}

func _Sched_CasePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CasePushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedServer).CasePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sched.Sched/CasePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedServer).CasePush(ctx, req.(*CasePushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sched_JobRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedServer).JobRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sched.Sched/JobRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedServer).JobRun(ctx, req.(*JobRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sched_ServiceDesc is the grpc.ServiceDesc for Sched service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sched_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sched.Sched",
	HandlerType: (*SchedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CasePush",
			Handler:    _Sched_CasePush_Handler,
		},
		{
			MethodName: "JobRun",
			Handler:    _Sched_JobRun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sched.proto",
}
